"""
Pytest configuration and shared fixtures for the test suite.

This module provides common fixtures and configuration for all tests,
including temporary workspaces, mock configurations, and test utilities.
"""

import pytest
import tempfile
import shutil
from pathlib import Path
from typing import Generator
import os
import sys

# Add src to Python path for imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from src.config import CONFIG, OSMConfig, NetworkConfig


@pytest.fixture
def temp_workspace() -> Generator[Path, None, None]:
    """
    Provides a temporary workspace directory for test runs.
    
    Automatically cleaned up after test completion.
    Isolated from the main workspace/ directory.
    """
    temp_dir = tempfile.mkdtemp(prefix="sumo_test_")
    workspace_path = Path(temp_dir)
    
    # Set environment variable for test isolation
    old_workspace = os.environ.get('SUMO_TEST_WORKSPACE')
    os.environ['SUMO_TEST_WORKSPACE'] = str(workspace_path)
    
    try:
        yield workspace_path
    finally:
        # Cleanup
        shutil.rmtree(temp_dir, ignore_errors=True)
        if old_workspace is not None:
            os.environ['SUMO_TEST_WORKSPACE'] = old_workspace
        elif 'SUMO_TEST_WORKSPACE' in os.environ:
            del os.environ['SUMO_TEST_WORKSPACE']


@pytest.fixture
def minimal_test_args() -> list[str]:
    """Minimal CLI arguments for fast tests."""
    return [
        "--grid_dimension", "3",
        "--block_size_m", "100",
        "--num_vehicles", "50",
        "--end-time", "60",
        "--seed", "42"
    ]


@pytest.fixture
def config_instance():
    """Provides access to the global CONFIG instance."""
    return CONFIG


@pytest.fixture
def sample_networks_path() -> str:
    """
    Path to Tree Method sample networks directory.
    
    Returns the path for testing Tree Method sample functionality.
    """
    return "evaluation/datasets/networks/"


@pytest.fixture
def expected_files_list() -> list[str]:
    """List of files that should be generated by a complete pipeline run."""
    return [
        "grid.net.xml",
        "grid.nod.xml", 
        "grid.edg.xml",
        "grid.con.xml",
        "grid.tll.xml",
        "vehicles.rou.xml",
        "zones.poly.xml",
        "grid.sumocfg"
    ]


# Test markers for categorization
def pytest_configure(config):
    """Configure custom pytest markers."""
    config.addinivalue_line(
        "markers", "smoke: quick validation tests (< 1 minute)"
    )
    config.addinivalue_line(
        "markers", "scenario: full scenario tests (2-5 minutes)"
    )
    config.addinivalue_line(
        "markers", "integration: pipeline integration tests"
    )
    config.addinivalue_line(
        "markers", "tree_method_sample: tests using Tree Method sample data"
    )
    config.addinivalue_line(
        "markers", "slow: long-running tests (> 5 minutes)"
    )


# Skip tests if SUMO not available
def pytest_collection_modifyitems(config, items):
    """Modify test collection to handle SUMO dependencies."""
    try:
        import sumolib
        import traci
        sumo_available = True
    except ImportError:
        sumo_available = False
    
    if not sumo_available:
        skip_sumo = pytest.mark.skip(reason="SUMO not available")
        for item in items:
            if "sumo" in item.keywords or "integration" in item.keywords:
                item.add_marker(skip_sumo)